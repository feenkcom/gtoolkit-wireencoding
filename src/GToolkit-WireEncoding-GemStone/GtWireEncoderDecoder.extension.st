Extension { #name : #GtWireEncoderDecoder }

{ #category : #'*GToolkit-WireEncoding-GemStone' }
GtWireEncoderDecoder class >> defaultMap [

	^ SessionTemps current
		at: #gtGsWireEncodingDefaultMap
		ifAbsentPut: [ self getDefaultMap ]
]

{ #category : #'*GToolkit-WireEncoding-GemStone' }
GtWireEncoderDecoder class >> defaultMapping [
	"The default mapping only encodes directly supported classes"
	| mapping |

	mapping := IdentityDictionary new.
	self map: ExecBlock withSubclassesTo: GtWireBlockClosureEncoder new in: mapping.
	self map: RsrService withSubclassesTo: GtWireGemStoneRsrEncoder new in: mapping.
	mapping
		at: Association put: GtWireAssociationEncoder new;
		at: Boolean put: GtWireBooleanEncoder new;
		at: ByteArray put: GtWireByteArrayEncoder new;
		at: String  put: GtWireStringEncoder new;
		at: DoubleByteString put: GtWireStringEncoder new;
		at: Unicode7 put: GtWireStringEncoder new;
		at: Unicode16 put: GtWireStringEncoder new;
		at: Unicode32 put: GtWireStringEncoder new;
		at: Symbol put: GtWireSymbolEncoder new;
		at: DoubleByteSymbol put: GtWireSymbolEncoder new;
		at: Character put: GtWireCharacterEncoder new;
		at: Array put: GtWireArrayEncoder new;
		at: Dictionary put: GtWireDictionaryEncoder new;
		at: OrderedCollection put: GtWireOrderedCollectionEncoder new;
		at: Set put: GtWireSetEncoder new;
		at: SmallInteger put: GtWireIntegerEncoder new;
		at: LargeInteger put: GtWireIntegerEncoder new;
		at: Float put: GtWireFloatEncoder new;
		at: SmallDouble put: GtWireFloatEncoder new;
		at: UndefinedObject put: GtWireNilEncoder new;
		at: DateAndTime put: GtWireDateAndTimeEncoder new;
		at: SmallDateAndTime put: GtWireDateAndTimeEncoder new.
	^ mapping
]

{ #category : #'*GToolkit-WireEncoding-GemStone' }
GtWireEncoderDecoder class >> defaultReverseMap [

	^ SessionTemps current
		at: #gtGsWireEncodingDefaultReverseMap
		ifAbsentPut: [ self getDefaultReverseMap ]
]

{ #category : #'*GToolkit-WireEncoding-GemStone' }
GtWireEncoderDecoder class >> getDefaultMap [
	"Generated by #generateDefaultMapMethodFrom:.
	Original source is #defaultMapping, changes should be made there and the code regenerated."

	^ IdentityDictionary new
		at: ((self lookupClass: #Array) ifNil: [ self error: 'Unable to find: Array' ]) put: GtWireArrayEncoder new;
		at: ((self lookupClass: #Association) ifNil: [ self error: 'Unable to find: Association' ]) put: GtWireAssociationEncoder new;
		at: ((self lookupClass: #Boolean) ifNil: [ self error: 'Unable to find: Boolean' ]) put: GtWireBooleanEncoder new;
		at: ((self lookupClass: #ByteArray) ifNil: [ self error: 'Unable to find: ByteArray' ]) put: GtWireByteArrayEncoder new;
		at: ((self lookupClass: #Character) ifNil: [ self error: 'Unable to find: Character' ]) put: GtWireCharacterEncoder new;
		at: ((self lookupClass: #DateAndTime) ifNil: [ self error: 'Unable to find: DateAndTime' ]) put: GtWireDateAndTimeEncoder new;
		at: ((self lookupClass: #Dictionary) ifNil: [ self error: 'Unable to find: Dictionary' ]) put: GtWireDictionaryEncoder new;
		at: ((self lookupClass: #DoubleByteString) ifNil: [ self error: 'Unable to find: DoubleByteString' ]) put: GtWireStringEncoder new;
		at: ((self lookupClass: #DoubleByteSymbol) ifNil: [ self error: 'Unable to find: DoubleByteSymbol' ]) put: GtWireSymbolEncoder new;
		at: ((self lookupClass: #ExecBlock) ifNil: [ self error: 'Unable to find: ExecBlock' ]) put: GtWireBlockClosureEncoder new;
		at: ((self lookupClass: #ExecBlock0) ifNil: [ self error: 'Unable to find: ExecBlock0' ]) put: GtWireBlockClosureEncoder new;
		at: ((self lookupClass: #ExecBlock1) ifNil: [ self error: 'Unable to find: ExecBlock1' ]) put: GtWireBlockClosureEncoder new;
		at: ((self lookupClass: #ExecBlock2) ifNil: [ self error: 'Unable to find: ExecBlock2' ]) put: GtWireBlockClosureEncoder new;
		at: ((self lookupClass: #ExecBlock3) ifNil: [ self error: 'Unable to find: ExecBlock3' ]) put: GtWireBlockClosureEncoder new;
		at: ((self lookupClass: #ExecBlock4) ifNil: [ self error: 'Unable to find: ExecBlock4' ]) put: GtWireBlockClosureEncoder new;
		at: ((self lookupClass: #ExecBlock5) ifNil: [ self error: 'Unable to find: ExecBlock5' ]) put: GtWireBlockClosureEncoder new;
		at: ((self lookupClass: #ExecBlockN) ifNil: [ self error: 'Unable to find: ExecBlockN' ]) put: GtWireBlockClosureEncoder new;
		at: ((self lookupClass: #Float) ifNil: [ self error: 'Unable to find: Float' ]) put: GtWireFloatEncoder new;
		at: ((self lookupClass: #GtRsrEvaluatorFeaturesService) ifNil: [ self error: 'Unable to find: GtRsrEvaluatorFeaturesService' ]) put: GtWireGemStoneRsrEncoder new;
		at: ((self lookupClass: #GtRsrEvaluatorFeaturesServiceServer) ifNil: [ self error: 'Unable to find: GtRsrEvaluatorFeaturesServiceServer' ]) put: GtWireGemStoneRsrEncoder new;
		at: ((self lookupClass: #GtRsrEvaluatorService) ifNil: [ self error: 'Unable to find: GtRsrEvaluatorService' ]) put: GtWireGemStoneRsrEncoder new;
		at: ((self lookupClass: #GtRsrEvaluatorServiceServer) ifNil: [ self error: 'Unable to find: GtRsrEvaluatorServiceServer' ]) put: GtWireGemStoneRsrEncoder new;
		at: ((self lookupClass: #GtRsrProxyService) ifNil: [ self error: 'Unable to find: GtRsrProxyService' ]) put: GtWireGemStoneRsrEncoder new;
		at: ((self lookupClass: #GtRsrProxyServiceServer) ifNil: [ self error: 'Unable to find: GtRsrProxyServiceServer' ]) put: GtWireGemStoneRsrEncoder new;
		at: ((self lookupClass: #GtRsrTestService) ifNil: [ self error: 'Unable to find: GtRsrTestService' ]) put: GtWireGemStoneRsrEncoder new;
		at: ((self lookupClass: #GtRsrTestServiceClient) ifNil: [ self error: 'Unable to find: GtRsrTestServiceClient' ]) put: GtWireGemStoneRsrEncoder new;
		at: ((self lookupClass: #GtRsrTestServiceServer) ifNil: [ self error: 'Unable to find: GtRsrTestServiceServer' ]) put: GtWireGemStoneRsrEncoder new;
		at: ((self lookupClass: #GtRsrWireTransferService) ifNil: [ self error: 'Unable to find: GtRsrWireTransferService' ]) put: GtWireGemStoneRsrEncoder new;
		at: ((self lookupClass: #GtRsrWireTransferServiceServer) ifNil: [ self error: 'Unable to find: GtRsrWireTransferServiceServer' ]) put: GtWireGemStoneRsrEncoder new;
		at: ((self lookupClass: #LargeInteger) ifNil: [ self error: 'Unable to find: LargeInteger' ]) put: GtWireIntegerEncoder new;
		at: ((self lookupClass: #OrderedCollection) ifNil: [ self error: 'Unable to find: OrderedCollection' ]) put: GtWireOrderedCollectionEncoder new;
		at: ((self lookupClass: #RsrPolicyRejectedService) ifNil: [ self error: 'Unable to find: RsrPolicyRejectedService' ]) put: GtWireGemStoneRsrEncoder new;
		at: ((self lookupClass: #RsrPolicyRejectedServiceClient) ifNil: [ self error: 'Unable to find: RsrPolicyRejectedServiceClient' ]) put: GtWireGemStoneRsrEncoder new;
		at: ((self lookupClass: #RsrPolicyRejectedServiceServer) ifNil: [ self error: 'Unable to find: RsrPolicyRejectedServiceServer' ]) put: GtWireGemStoneRsrEncoder new;
		at: ((self lookupClass: #RsrReasonService) ifNil: [ self error: 'Unable to find: RsrReasonService' ]) put: GtWireGemStoneRsrEncoder new;
		at: ((self lookupClass: #RsrRemoteException) ifNil: [ self error: 'Unable to find: RsrRemoteException' ]) put: GtWireGemStoneRsrEncoder new;
		at: ((self lookupClass: #RsrRemoteExceptionClient) ifNil: [ self error: 'Unable to find: RsrRemoteExceptionClient' ]) put: GtWireGemStoneRsrEncoder new;
		at: ((self lookupClass: #RsrRemoteExceptionServer) ifNil: [ self error: 'Unable to find: RsrRemoteExceptionServer' ]) put: GtWireGemStoneRsrEncoder new;
		at: ((self lookupClass: #RsrService) ifNil: [ self error: 'Unable to find: RsrService' ]) put: GtWireGemStoneRsrEncoder new;
		at: ((self lookupClass: #Set) ifNil: [ self error: 'Unable to find: Set' ]) put: GtWireSetEncoder new;
		at: ((self lookupClass: #SmallDateAndTime) ifNil: [ self error: 'Unable to find: SmallDateAndTime' ]) put: GtWireDateAndTimeEncoder new;
		at: ((self lookupClass: #SmallDouble) ifNil: [ self error: 'Unable to find: SmallDouble' ]) put: GtWireFloatEncoder new;
		at: ((self lookupClass: #SmallInteger) ifNil: [ self error: 'Unable to find: SmallInteger' ]) put: GtWireIntegerEncoder new;
		at: ((self lookupClass: #String) ifNil: [ self error: 'Unable to find: String' ]) put: GtWireStringEncoder new;
		at: ((self lookupClass: #Symbol) ifNil: [ self error: 'Unable to find: Symbol' ]) put: GtWireSymbolEncoder new;
		at: ((self lookupClass: #UndefinedObject) ifNil: [ self error: 'Unable to find: UndefinedObject' ]) put: GtWireNilEncoder new;
		at: ((self lookupClass: #Unicode16) ifNil: [ self error: 'Unable to find: Unicode16' ]) put: GtWireStringEncoder new;
		at: ((self lookupClass: #Unicode32) ifNil: [ self error: 'Unable to find: Unicode32' ]) put: GtWireStringEncoder new;
		at: ((self lookupClass: #Unicode7) ifNil: [ self error: 'Unable to find: Unicode7' ]) put: GtWireStringEncoder new;
		yourself.
]

{ #category : #'*GToolkit-WireEncoding-GemStone' }
GtWireEncoderDecoder class >> getDefaultReverseMap [
	"Generated by #generateDefaultReverseMapMethodFrom:.
	Original source is #defaultMapping, changes should be made there and the code regenerated."

	^ IdentityDictionary new
		at: 1 put: GtWireNilEncoder new;
		at: 2 put: GtWireTrueEncoder new;
		at: 3 put: GtWireFalseEncoder new;
		at: 4 put: GtWireByteArrayEncoder new;
		at: 5 put: GtWireStringEncoder new;
		at: 6 put: GtWireSymbolEncoder new;
		at: 7 put: GtWireCharacterEncoder new;
		at: 8 put: GtWireArrayEncoder new;
		at: 9 put: GtWireDictionaryEncoder new;
		at: 10 put: GtWireOrderedCollectionEncoder new;
		at: 11 put: GtWireSetEncoder new;
		at: 12 put: GtWireDateAndTimeEncoder new;
		at: 13 put: GtWirePositiveIntegerEncoder new;
		at: 14 put: GtWireNegativeIntegerEncoder new;
		at: 15 put: GtWireAssociationEncoder new;
		at: 16 put: GtWireIntegerEncoder new;
		at: 17 put: GtWireFloatEncoder new;
		at: 19 put: GtWireStonEncoder new;
		at: 20 put: GtWireInstVarEncoder new;
		at: 21 put: GtWireBlockClosureEncoder new;
		at: 22 put: GtWireObjectByNameEncoder new;
		at: 23 put: GtWireGemStoneOopEncoder new;
		at: 24 put: GtWireGemStoneRsrEncoder new;
		yourself.
]
